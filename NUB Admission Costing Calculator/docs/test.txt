------------------------------------------------------------test.h------------------------------------------------------------

You should know:
- D_ prefix is used for Diploma Holder functions.

typedef void (*ResultCallback)(const char *)
- Defines a function pointer type named ResultCallback.
- ResultCallback is a pointer to a function that takes a single argument of type `const char *` and returns nothing (void).
- It is used to pass functions as arguments to other functions, allowing for custom behavior when those functions are called.

NOTE: This type definition allows for greater flexibility and modularity in the code by enabling functions 
      to accept different callback implementations that conform to the specified signature.

typedef int (*CreditCallback)(sqlite3_stmt *);
- Defines a function pointer type named CreditCallback.
- CreditCallback is a pointer to a function that takes a single argument of type `sqlite3_stmt *` and returns an integer.
- It is used to pass functions as arguments to other functions, allowing for custom behavior when those functions are called.

typedef int (*D_CreditCallback)(sqlite3_stmt *, double);
- Defines a function pointer type named D_CreditCallback.
- D_CreditCallback is a pointer to a function that takes two arguments: one of type `sqlite3_stmt *` and
  one of type `double`, and returns an integer.
- It is used to pass functions as arguments to other functions, allowing for custom behavior when those functions are called.

void getwaiver(double SSC, double HSC, const char *department)
- Determines the lower of the SSC and HSC results.
- Checks if the department is "LLB" or "B_Pharm" or if the lowest result is below 3.50:
  - Sets waiver to 0 if any of these conditions are met.
- Sets waiver based on the lower of the SSC and HSC results:
  - If the result is greater than 5.00, sets waiver to 70 (which is for GOLDEN GPA 5)
  - If the result is equal to 5.00, sets waiver to 40
  - If the result is between 4.80 and 4.99 (inclusive), sets waiver to 30
  - If the result is between 4.50 and 4.79 (inclusive), sets waiver to 20
  - If the result is between 4.00 and 4.49 (inclusive), sets waiver to 15
  - If the result is between 3.50 and 3.99 (inclusive), sets waiver to 10

NOTE: The function calculates waivers based on academic performance, 
      incentivizing higher scores with greater financial discounts.

bool D_getwaiver(float DiplomaResult)
- Determines eligibility for a waiver based on the Diploma result for undergraduate for diploma holders.
- Returns true if the Diploma result is 3.0 or higher, indicating eligibility for a waiver.
- Returns false if the Diploma result is below 3.0, indicating ineligibility for a waiver.

NOTE: This function simplifies the waiver determination process for diploma holders 
      by using a single threshold value, streamlining administrative procedures.

void replace_placeholder(char *buffer, const char *placeholder, const char *value)
- At first, finds placeholder position 
- Then adds null character at starting position of placeholder.
- Concatenates temp, buffer, value together originally inside of temp.
- Lastly and safely, temp is copied in actual buffer.

NOTE: here temp is used for avoiding overlapping issues, safe replacement, buffer overflow protection.

void Display(ResultCallback callback)
- Opens "formats/format.txt" in read mode.
- Opens a temporary file defined by TEMP_FILE_NAME for read and write operations.
- Reads lines from the format file into a buffer.
- For each placeholder found, replaces it with its corresponding value using the replace_placeholder function.
- Writes the updated buffer to the temporary file.
- Rewinds the temporary file to read from the beginning.
- Reads lines from the temporary file and calls the provided callback function with each line of output.
- Closes both input and temporary files.
- Removes the temporary file using TEMP_FILE_NAME.

NOTE: The use of a temporary file ensures that data is processed and stored safely before being passed
      to the callback, preventing potential data corruption or loss during processing.

void D_Display(ResultCallback callback)
- Opens "formats/D_format.txt" as read mode.
- Opens a temporary file defined by TEMP_FILE_NAME for read and write operations.
- Reads lines from the D_format file into a buffer.
- For each placeholder found, replaces it with its corresponding value using the replace_placeholder function.
- Writes the updated buffer to the temporary file.
- Rewinds the temporary file to read from the beginning.
- Reads lines from the temporary file and calls the provided callback function with each line of output.
- Closes both input and temporary files.
- Removes the temporary file using TEMP_FILE_NAME.

NOTE: This function is similar to `Display` but uses a different format file ("formats/D_format.txt").
      It ensures safe data processing and storage before passing it to the callback, avoiding data 
      corruption or loss during processing.

void getCalculated(const char *department, double SSC, double HSC, ResultCallback callback)
- Opens a connection to the database defined by DATABASE_NAME.
- Handles errors if the database cannot be opened.
- Constructs a SQL query to retrieve cost data for the specified department from the CostingChart table.
- Prepares the SQL statement for execution.
- Handles errors if the SQL statement fails to execute.
- Executes the SQL statement and checks if the department was found.
- Retrieves data from the resulting row:
  - SemesterFee
  - CreditFee
  - AdmissionFee
  - OtherFees
  - TotalCredits
  - Duration
  - Semesters
- Calls the getwaiver function to calculate the waiver based on SSC and HSC scores and department.
- Calculates the total cost (TC) using the retrieved data and calculated waiver.
- Calls the Display function with the provided callback function to display the results.
- Resets all variables to 0.
- Finalizes the SQL statement and closes the database connection.

void D_getCalculated(const char *department, double DiplomaResult, ResultCallback callback)
- Opens a connection to the database defined by D_DATABASE_NAME.
- Handles errors if the database cannot be opened.
- Constructs a SQL query to retrieve cost data for the specified department from the D_CostingChart table.
- Prepares the SQL statement for execution.
- Handles errors if the SQL statement fails to execute.
- Executes the SQL statement and checks if the department was found.
- Retrieves data from the resulting row:
  - CreditFee
  - SemesterFee
  - OtherFees
  - AdmissionFee
  - Duration
- Calls the D_getwaiver function to determine waiver eligibility based on the DiplomaResult:
  - If eligible, retrieves:
    - TotalCredit
    - Semester
  - If not eligible, retrieves:
    - TotalCreditBelow
    - SemesterBelow
- Calculates the total cost (TC) using the retrieved data.
- Calls the D_Display function with the provided callback function to display the results.
- Resets all variables to 0.
- Finalizes the SQL statement and closes the database connection.

void read_about_description()
- Opens the file specified by ABOUT_DETAILS_PATH in read mode.
- Handles errors if the file cannot be opened by printing an error message and 
  setting about_description to "ERROR 404\nNot Found".
- Initializes about_description as an empty string.
- Reads lines from the file until the end
  - Removes the newline character if present.
  - Concatenates each line to the about_description string.
  - Adds a newline character for formatting between lines.
- Closes the file.

------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------test.c------------------------------------------------------------

double waiver, int TC, year, semester, credit (to be used across multiple files)
- These global variables are used throughout the program to store and manipulate data related to academic programs.

double semesterFee, creditFee, admissionFee, otherFees
- These global variables are used to read data from database.

#define BUFFER_SIZE 1024
- Defines a global macro for the buffer size used when reading from files. It sets the size of the buffer to 1024 bytes.

char FILE_NAME[] = "formats/D_formate.txt"
- Declares a global array of characters that stores the path of the output format for undergraduate.

char D_FILE_NAME[] = "formats/D_formate.txt"
- Declares a global array of characters that stores the path of the output format for diploma holders.

char TEMP_FILE_NAME[] = "formats/temp.txt"
- Declares a global array of characters that stores the path of the temporary file used during output generation.

#define ROW_BUFFFER_SIZE 256
- Defines a global macro for the buffer size used when retrieving data from a row of database.

char DATABASE_NAME[] = "database/costing_chart.db"
- Declares a global array of characters that stores the path of the database for undergraduate.

char D_DATABASE_NAME[] = "database/d_costing_chart.db"
- Declares a global array of characters that stores the path of the database for diploma holders.

#define MAX_BUF_SIZE 4096
- Defines a global macro for the buffer size used when reading from files. It sets the size of the buffer to 4096 bytes.

char about_description[MAX_BUF_SIZE] = {0};
- This global array stores the content read from the about file.

char ABOUT_DETAILS_PATH[] = "../formats/about.txt";
- This global array stores the path to the about file.

------------------------------------------------------------------------------------------------------------------------------