-------------------------------------------------------test.h-------------------------------------------------------

You should know:
- D_ prefix is used for Diploma Holder functions.

typedef void (*ResultCallback)(const char *)
- Defines a function pointer type named ResultCallback.
- ResultCallback is a pointer to a function that takes a single argument of type `const char *` and returns nothing (void).
- It is used to pass functions as arguments to other functions, allowing for custom behavior when those functions are called.

NOTE: This type definition allows for greater flexibility and modularity in the code by enabling functions 
      to accept different callback implementations that conform to the specified signature.

void getwaiver(float SSC, float HSC)
- Determines the waiver percentage based on the lower of two results between SSC and HSC.
- Result higher than than 5.0 is kept for GOLDEN GPA 5.

NOTE: The function calculates waivers based on academic performance, 
      incentivizing higher scores with greater financial discounts.

bool D_getwaiver(float DiplomaResult)
- Determines eligibility for a waiver based on the Diploma result for undergraduate for diploma holders.
- Returns true if the Diploma result is 3.0 or higher, indicating eligibility for a waiver.
- Returns false if the Diploma result is below 3.0, indicating ineligibility for a waiver.

NOTE: This function simplifies the waiver determination process for diploma holders 
      by using a single threshold value, streamlining administrative procedures.

void replace_placeholder(char *buffer, const char *placeholder, const char *value)
- At first, finds placeholder position 
- Then adds null character at starting position of placeholder.
- Concatenates temp, buffer, value together originally inside of temp.
- Lastly and safely, temp is copied in actual buffer.

NOTE: here temp is used for avoiding overlapping issues, safe replacement, buffer overflow protection.

void Display(ResultCallback callback)
- Opens "formats/format.txt" in read mode.
- Opens a temporary file defined by TEMP_FILE_NAME for read and write operations.
- Reads lines from the format file into a buffer.
- For each placeholder found, replaces it with its corresponding value using the replace_placeholder function.
- Writes the updated buffer to the temporary file.
- Rewinds the temporary file to read from the beginning.
- Reads lines from the temporary file and calls the provided callback function with each line of output.
- Closes both input and temporary files.
- Removes the temporary file using TEMP_FILE_NAME.

NOTE: The use of a temporary file ensures that data is processed and stored safely before being passed
      to the callback, preventing potential data corruption or loss during processing.

void D_Display(ResultCallback callback)
- Opens "formats/D_format.txt" as read mode.
- Opens a temporary file defined by TEMP_FILE_NAME for read and write operations.
- Reads lines from the D_format file into a buffer.
- For each placeholder found, replaces it with its corresponding value using the replace_placeholder function.
- Writes the updated buffer to the temporary file.
- Rewinds the temporary file to read from the beginning.
- Reads lines from the temporary file and calls the provided callback function with each line of output.
- Closes both input and temporary files.
- Removes the temporary file using TEMP_FILE_NAME.

NOTE: This function is similar to `Display` but uses a different format file ("formats/D_format.txt").
      It ensures safe data processing and storage before passing it to the callback, avoiding data 
      corruption or loss during processing.

--------------------------------------------------------------------------------------------------------------------